{
  "hash": "9b67ae801f4cb5236b2c9f19c3d4ef84",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Longitudinal ordinal regression model simulations\"\ntoc: TRUE\n---\n\n# Load libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(brms)\nlibrary(ggbeeswarm)\nlibrary(MASS) # fit ordinal logistic regression \nlibrary(brant) # check proportional odds assumption\nlibrary(marginaleffects) # contrats, g-computation\nlibrary(patchwork) # visualization\nlibrary(ordinal) # fitting longitudinal ordinal model\nlibrary(ggeffects)# plotting long ordinal model\nlibrary(tidybayes)\noh_cols<- c('#50BECB',\t'#46A6B2',\t'#65C9D5',\t'#97D3DC',\t'#CDEBF0',\t'#EDE668',\t'#AA1E2D',\t'#E4E5E3',\t'#F26828',\t'#DC5C1D',\t'#F89C70',\t'#FDCEB0',\t'#2A3C47',\t'#18272F',\t'#404C58',\t'#646A74',\t'#C3C3C8',\t'#74308C')\noh_cols<- c('#65C9D5',\t'#EDE668',\t'#AA1E2D',\t'#F26828',\t'#FDCEB0',\t'#C3C3C8',\t'#74308C','#18272F')\n```\n:::\n\n\n# Cross-sectional ordinal design\n\n## Simulating ordinal data\n\nSimulating a RCT, treatment A vs treatment B, and their impact on quality of life. How to simulate?\n\n-   For treatment B, Draw from a normal distribution, normal (100, std=20).\\\n-   Split normal distribution based on 7 cut offs ; so there are 8 ordinal categories\\\n-   Sample treatment A from normal (110,std=20), and categorize based on treatment B splits/categories.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#sample 1000 patients\nn<-1000\n\nod<-tibble(A=rnorm(n=n,mean=105,sd=20),B=rnorm(n=n,mean=110,sd=20))|>\n  pivot_longer(names_to = \"treatment\",values_to = \"num\",A:B)\n#get  cutoffs\nprobs=seq(0,1,1/8)[2:8]\n#get quantiles \nquantiles <- qnorm(probs, mean = 100, sd = 20)#\n\nod<-od|>\n  mutate(QOL=if_else(num<quantiles[1],1,if_else(num<quantiles[2],2,if_else(num<quantiles[3],3,if_else(num<quantiles[4],4,if_else(num<quantiles[5],5,if_else(num<quantiles[6],6,if_else(num<quantiles[7],7,8))))))))|>\n  mutate(QOL=factor(as.character(QOL)))\n\n#compare ordinal values between groups\n#ggplot(od,aes(x=treatment,y=QOL,colour=treatment))+geom_quasirandom()\n#visualize the data\nfig5<-ggplot(od,aes(x=treatment,y=num,colour=treatment))+geom_quasirandom()+theme(legend.position=\"none\")+geom_hline(yintercept = quantiles)+scale_y_continuous(limits=c(40,180),breaks=c(quantiles,133)-5,labels=c(\"none\",\"less\",\"slight\",\"mild\",\"above mild\",\"severe\",\"overly severe\",\"death\"),name=\"Ordinal scale QOL\")+scale_color_manual(values=c('#65C9D5','#74308C'))\nfig5\n```\n\n::: {.cell-output-display}\n![](03_longitudinal_ordinal_modelling_files/figure-html/cs ordinal data simulation-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(fig5,filename=\"01_QOL-ordinal_vs_treatmentA-B_crosssectional.png\",unit=\"in\",dpi=600,width=4,height=4)\n```\n:::\n\n\n## Fit ordinal logistic mode\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ordinal model \nmod1 <- polr(QOL~ treatment, data = od, Hess=TRUE)\nsummary(mod1) # model output\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall:\npolr(formula = QOL ~ treatment, data = od, Hess = TRUE)\n\nCoefficients:\n            Value Std. Error t value\ntreatmentB 0.4545    0.07887   5.762\n\nIntercepts:\n    Value    Std. Error t value \n1|2  -2.4126   0.0953   -25.3156\n2|3  -1.4824   0.0712   -20.8163\n3|4  -0.8811   0.0633   -13.9119\n4|5  -0.3898   0.0603    -6.4655\n5|6   0.1386   0.0597     2.3235\n6|7   0.6941   0.0614    11.3044\n7|8   1.4762   0.0684    21.5912\n\nResidual Deviance: 8021.418 \nAIC: 8037.418 \n```\n\n\n:::\n\n```{.r .cell-code}\nexp(coef(mod1)) # treatment B has a 2.2 increased odds ratio in QOL than treatment A\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntreatmentB \n  1.575329 \n```\n\n\n:::\n\n```{.r .cell-code}\n#check proportional odds\nbrant(mod1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n-------------------------------------------- \nTest for\tX2\tdf\tprobability \n-------------------------------------------- \nOmnibus\t\t4.64\t6\t0.59\ntreatmentB\t4.64\t6\t0.59\n-------------------------------------------- \n\nH0: Parallel Regression Assumption holds\n```\n\n\n:::\n\n```{.r .cell-code}\n##predict values \nnew.dat<-data.frame(treatment=c(\"A\",\"B\"))\n\n#get predictions\nnpred<-predict(mod1,new.dat,type=\"probs\")|>\n  data.frame()|>\n  mutate(treatment=c(\"A\",\"B\"))|>\n  pivot_longer(X1:X8,names_to = \"Ordinal\",values_to=\"Probability\")|>\n  mutate(ord.num=substr(Ordinal,2,2))\n\n#ggplot(npred,aes(x=treatment,y=Probability,colour=treatment))+geom_point(size=5)+facet_wrap(~Ordinal,ncol=4)\n\n#plot on more continuous scale \nfig1<-ggplot(npred,aes(x=ord.num,y=Probability,colour=treatment,group=treatment))+geom_point(size=5)+geom_line(linewidth=1)+theme_bw()+theme(legend.position = \"top\")+xlab(\"Ordinal Scale (Good QOL -> Bad QOL)\")+scale_y_continuous(limits=c(0,.3),breaks=seq(0,.3,.025),labels=seq(0,.3,.025))\n```\n:::\n\n\n## Let's see if we can conduct g-computation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#try marginaleffects \nnd<-expand.grid(treatment=c(\"A\",\"B\"),ind=1:1000)\n#gcomp<-avg_comparisons(mod1,variables = \"treatment\",newdata=nd)\ngcomp<-avg_comparisons(mod1,variables = \"treatment\",newdata=datagrid(newdata = od,grid_type=\"counterfactual\",treatment=c(\"A\",\"B\"))) # same code as above\ngdat<-gcomp|>\n  broom::tidy()\n\nfig2<-ggplot(gdat,aes(x=1:8,y=estimate))+geom_point(size=3)+geom_line(linewidth=.75)+geom_ribbon(aes(ymin=conf.low,ymax=conf.high),alpha=.5,colour=\"grey80\")+scale_x_continuous(breaks=1:8,labels=1:8)+theme_bw()+geom_hline(yintercept = 0,lty=\"dotdash\",linewidth=.75)+ylab(\"Contrast (Treatment B-A)\")+xlab(\"Ordinal scale (Good QOL -> Bad QOL)\")\n\nfig12<-fig1+fig2\nfig12\n```\n\n::: {.cell-output-display}\n![](03_longitudinal_ordinal_modelling_files/figure-html/frequentist g-computation-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(fig12,filename=\"01_two_panel_ordinal_scale_contrast_treatmentA_treatmentB.png\",width=7,height=5,dpi=600,unit=\"in\")\n```\n:::\n\n\n# Longitudinal ordinal design\n\nSimulating RCT, treatment A vs B, and their impact on quality of life. QOL is tracked over time. Treatment A reduces QOL at a faster rate than treatment B. How to simulate?\n\n-   Get a global normal distribution, normal(200,25) and split data\n-   Have 4 ordinal levels (none, low, mild, severe, death)\n-   Have 5 time points -\\> increase mean from 120, every 20 over each time point for treatment B, for treatment A increase from 120, every 40 over each time point.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#number of patients\nn<-100\n#get  cutoffs\nprobs=seq(0,1,1/5)[2:5]\n#get quantiles \nquantiles <- qnorm(probs, mean = 180, sd = 50)#\n\ntp1<-tibble(A=rnorm(n=n,mean=120,sd=20),B=rnorm(n=n,mean=110,sd=20),time=1)|>\n  pivot_longer(names_to = \"treatment\",values_to = \"num\",A:B)|>\n  mutate(id=1:length(num))\n\ntp2<-tibble(A=rnorm(n=n,mean=160,sd=20),B=rnorm(n=n,mean=130,sd=20),time=2)|>\n  pivot_longer(names_to = \"treatment\",values_to = \"num\",A:B)|>\n  mutate(id=1:length(num))\n\ntp3<-tibble(A=rnorm(n=n,mean=200,sd=20),B=rnorm(n=n,mean=160,sd=20),time=3)|>\n  pivot_longer(names_to = \"treatment\",values_to = \"num\",A:B)|>\n  mutate(id=1:length(num))\n\ntp4<-tibble(A=rnorm(n=n,mean=240,sd=20),B=rnorm(n=n,mean=180,sd=10),time=4)|>\n  pivot_longer(names_to = \"treatment\",values_to = \"num\",A:B)|>\n  mutate(id=1:length(num))\n\ntp5<-tibble(A=rnorm(n=n,mean=280,sd=20),B=rnorm(n=n,mean=200,sd=20),time=5)|>\n  pivot_longer(names_to = \"treatment\",values_to = \"num\",A:B)|>\n  mutate(id=1:length(num))\n\n#combine longitudinal data\ntpd<-rbind(tp1,tp2,tp3,tp4,tp5)|>\n  arrange(id,time,treatment)|>\n  mutate(QOL=if_else(num<quantiles[1],1,if_else(num<quantiles[2],2,if_else(num<quantiles[3],3,if_else(num<quantiles[4],4,5)))),QOL=as.factor(as.character(QOL)))\n\n\n##spagehtti plots \n\nfig4<-ggplot(tpd,aes(x=time,y=num,colour=treatment,group=factor(id)))+geom_point()+geom_line(aes(group=factor(id)))+theme(legend.position=\"top\")+geom_hline(yintercept = quantiles)+scale_y_continuous(limits=c(50,310),breaks=c(quantiles,250)-15,labels=c(\"none\",\"less\",\"mild\",\"severe\",\"death\"),name=\"Ordinal scale QOL\")+scale_color_manual(values=c('#65C9D5','#74308C'))\nfig4\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 6 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 6 rows containing missing values or values outside the scale range\n(`geom_line()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](03_longitudinal_ordinal_modelling_files/figure-html/longitudinal ordinal model-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#ggsave(fig4,filename=\"01_ordinal_scale_fig_ztreatmentA_B_vstime_longitudinal.png\",width=5,height=4,dpi=600,)\n```\n:::\n\n\n## Fitting longitudinal ordinal regression model\n\nfrequentist doesnt work well for estimating contrasts, but I'm going to try with the brms package (bayesian)\n\n\n(didn't run this code because it takes too long)\n\n::: {.cell}\n\n```{.r .cell-code}\n#set up the model \n#ordinal longitudinal random effects model\n#random intercept and random slope \n#mod2<-clmm(QOL~treatment+time+(1+time|id),data=tpd)\ntpd$QOL <- as.ordered(tpd$QOL)\nmod2<-brm(QOL~treatment+time+(1+time|id),data=tpd,family=cumulative(),iter = 1000)\n#prior=set_prior(\"normal(0,5)\",class=\"b\")\nsummary(mod2)\n# I should save the model, bc it takes forever to run\nsaveRDS(mod2,\"Output_datasets/longitudinal_ordinal_bayesian_brmsmodel_simulateddata_time_and_treatmenteffects\")\n\n\n\n####model checks\n##check the model: \npp_check(mod2)\n#trace plots \nmcmc_plot(mod2, type = \"trace\")\nmcmc_plot(mod2, type = \"dens_overlay\")\n\n#\n# Generate posterior predictions\npredictions <- add_predicted_draws(mod2, newdata = tpd)\n\n# Plot predictions\nggplot(predictions, aes(x = time, y = .prediction, color = treatment)) +\n  geom_line() +\n  labs(title = \"Posterior Predictive Distribution\")\n\n\n\n##########\n\n\n##################3g-comp\n\n##g-computation\nnd1<-expand.grid(treatment=c(\"A\",\"B\"),ind=1:100)\n\ngcomp2<-avg_comparisons(mod2,variables = \"treatment\",newdata=datagrid(newdata = tpd,grid_type=\"counterfactual\",treatment=c(\"A\",\"B\"))) # same code as above\n#predict(mod2,nd1,type=\"probs\")\n\ngcomp2\n```\n:::\n\n\n# Session Info\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.5.0 (2025-04-11 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 26100)\n\nMatrix products: default\n  LAPACK version 3.12.1\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] tidybayes_3.0.7        ggeffects_2.2.1        ordinal_2023.12-4.1   \n [4] patchwork_1.3.0        marginaleffects_0.25.1 brant_0.3-0           \n [7] MASS_7.3-65            ggbeeswarm_0.7.2       brms_2.22.0           \n[10] Rcpp_1.0.14            lubridate_1.9.4        forcats_1.0.0         \n[13] stringr_1.5.1          dplyr_1.1.4            purrr_1.0.4           \n[16] readr_2.1.5            tidyr_1.3.1            tibble_3.2.1          \n[19] ggplot2_3.5.2          tidyverse_2.0.0       \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6         beeswarm_0.4.0       tensorA_0.36.2.1    \n [4] xfun_0.52            htmlwidgets_1.6.4    insight_1.1.0       \n [7] lattice_0.22-6       numDeriv_2016.8-1.1  tzdb_0.5.0          \n[10] vctrs_0.6.5          tools_4.5.0          generics_0.1.3      \n[13] parallel_4.5.0       ucminf_1.2.2         pkgconfig_2.0.3     \n[16] Matrix_1.7-3         data.table_1.17.0    checkmate_2.3.2     \n[19] distributional_0.5.0 RcppParallel_5.1.10  lifecycle_1.0.4     \n[22] farver_2.1.2         compiler_4.5.0       textshaping_1.0.0   \n[25] Brobdingnag_1.2-9    munsell_0.5.1        vipor_0.4.7         \n[28] htmltools_0.5.8.1    bayesplot_1.12.0     yaml_2.3.10         \n[31] pillar_1.10.2        arrayhelpers_1.1-0   bridgesampling_1.1-2\n[34] abind_1.4-8          nlme_3.1-168         posterior_1.6.1     \n[37] svUnit_1.0.6         tidyselect_1.2.1     digest_0.6.37       \n[40] mvtnorm_1.3-3        stringi_1.8.7        labeling_0.4.3      \n[43] fastmap_1.2.0        grid_4.5.0           colorspace_2.1-1    \n[46] cli_3.6.4            magrittr_2.0.3       loo_2.8.0           \n[49] broom_1.0.8          withr_3.0.2          scales_1.3.0        \n[52] backports_1.5.0      timechange_0.3.0     rmarkdown_2.29      \n[55] matrixStats_1.5.0    ragg_1.4.0           hms_1.1.3           \n[58] coda_0.19-4.1        evaluate_1.0.3       knitr_1.50          \n[61] ggdist_3.3.2         rstantools_2.4.0     rlang_1.1.6         \n[64] glue_1.8.0           jsonlite_2.0.0       R6_2.6.1            \n[67] systemfonts_1.2.2   \n```\n\n\n:::\n:::\n\n",
    "supporting": [
      "03_longitudinal_ordinal_modelling_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}